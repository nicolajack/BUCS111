Name: Nicola Jackson
Email: nicolacj@bu.edu


puzzles with 5-move optimal solutions
-------------------------------------
algorithm                num. solved    avg. moves    avg. states tested
------------------------------------------------------------------------
random                     10             5.4           201.7
BFS                        10             5.0           47.1
DFS (depth limit 20)       10             16.2          19072.7
DFS (depth limit 50)       10             48.2          49043.0
Greedy Search (using h1)   10             5.4           70.3
A* (using h1)              10             5.0           6.5


puzzles with 10-move optimal solutions
-------------------------------------
algorithm                num. solved    avg. moves    avg. states tested
------------------------------------------------------------------------
random                     10             10.0          612.2
BFS                        10             10.0          747.4
DFS (depth limit 20)       10             18.8          24858.0
DFS (depth limit 50)       10             49.2          92287.3
Greedy Search (using h1)   8              76.0          325.625
A* (using h1)              10             10.0          27.3


puzzles with 15-move optimal solutions
-------------------------------------
algorithm                num. solved    avg. moves    avg. states tested
------------------------------------------------------------------------
random                     4              16.5          3819.0
BFS                        10             15.0          12672.0
DFS (depth limit 20)       10             17.8          68659.0
DFS (depth limit 50)       9              48.5          70523.1
Greedy Search (using h1)   6              90.3          2718.0
A* (using h1)              10             15.0          313.8


This data tells me a lot about the various algorithms I've implemented. For example, it demonstrates to me that the most effective algorithm, without a doubt, is A*, as it always solved every puzzle in the optimal amount of moves, and returned it's answers within the shortest amount of time with the least number of states tested. Conversely, the Greedy searcher appears to be the least effective algorithm as it tended to solve the least amount of puzzles in the most average moves and search the most states. The BFS appears to be the second most effective as it always stuck to the optimal number of moves and returned it's results in a timely manner, albeit with more states tested than A*, but less than most other algorithms. The results of the random algorithm on the puzzles with 15-move optimal solutions surprised me as it solved the least number of puzzles accross the board. Again, as A* repeatedly produces the most reliably optimal results and does the least amount of work in doing so, I feel as though it is the most optimal algorithm. 


heuristic h2
------------
This heuristic calculates the number of conflicts on the board for each non-blank tile by comparing each tiles current position with its goal position.


puzzles with 18-move optimal solutions
--------------------------------------
algorithm              num. solved    avg. moves    avg. states tested
----------------------------------------------------------------------
Greedy (heuristic h1)    6              136.3            2237.8
Greedy (heuristic h2)    10             74.8             254.2

A* (heuristic h1)        10             18.0             1602.0
A* (heuristic h2)        10             18.0             510.9

puzzles with 21-move optimal solutions
--------------------------------------
algorithm              num. solved    avg. moves    avg. states tested
----------------------------------------------------------------------
Greedy (heuristic h1)    4              109.0            416.5
Greedy (heuristic h2)    10             83.4             397.7

A* (heuristic h1)        10             21.0             6301.7
A* (heuristic h2)        10             21.0             1499.6

puzzles with 24-move optimal solutions
--------------------------------------
algorithm              num. solved    avg. moves    avg. states tested
----------------------------------------------------------------------
Greedy (heuristic h1)    6              123.6            2856.2
Greedy (heuristic h2)    10             114.0            400.4

A* (heuristic h1)        0             
A* (heuristic h2)        10             24.0             5303.0

puzzles with 27-move optimal solutions
--------------------------------------
algorithm              num. solved    avg. moves    avg. states tested
----------------------------------------------------------------------
Greedy (heuristic h1)    4              197.5            4285.5
Greedy (heuristic h2)    10             117.0            402.5

A* (heuristic h1)        0             
A* (heuristic h2)        10             27.0             25680.0


This data tells me that the h2 heuristic is far superior to the h1 heuristic in that it never failed to solve a puzzle, and was able to solve puzzles much more quickly. In total, the h2 heuristic tested fewer states on average and required far fewer searches to be terminated. Furthermore, with the h2 heuristic my Greedy searcher was able to find solutions requiring fewer moves each time. My A* searcher was also able to continue to find optimal solutions.